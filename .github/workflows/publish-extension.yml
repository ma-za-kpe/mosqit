name: Publish Chrome Extension

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'package.json'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Determine version bump type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect version type from commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"major:"* ]]; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"minor:"* ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          VERSION_TYPE="${{ steps.version_type.outputs.type }}"
          echo "Bumping $VERSION_TYPE version..."

          # Read current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Update manifest.json after building
          echo "$NEW_VERSION" > version.txt

      - name: Build extension
        run: |
          npm run build:extension

          # Update manifest.json with new version
          NEW_VERSION=$(cat version.txt)
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" dist/extension/manifest.json

      - name: Package extension
        run: |
          cd dist/extension
          zip -r ../mosqit-extension.zip .
          cd ../..
          echo "Extension packaged successfully"

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git add package.json package-lock.json
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]" || echo "No changes to commit"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main --follow-tags

      - name: Upload extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: mosqit-extension-${{ steps.bump_version.outputs.new_version }}
          path: dist/mosqit-extension.zip

      # Auto-publish to Chrome Web Store
      - name: Publish to Chrome Web Store
        if: ${{ secrets.CHROME_EXTENSION_ID != '' }}
        id: chrome_publish
        continue-on-error: true
        uses: mnao305/chrome-extension-upload@v4.0.1
        with:
          file-path: dist/mosqit-extension.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          files: dist/mosqit-extension.zip
          body: |
            ## 🦟 Mosqit Chrome Extension v${{ steps.bump_version.outputs.new_version }}

            ### 📦 Installation
            1. Download `mosqit-extension.zip`
            2. Go to `chrome://extensions/`
            3. Enable Developer Mode
            4. Drag and drop the ZIP file

            ### 🛍️ Chrome Web Store
            ${{ steps.chrome_publish.outcome == 'success' && '✅ Successfully submitted to Chrome Web Store. Available after review (1-3 days).' || '⚠️ Manual submission required to Chrome Web Store.' }}

            ### 🚀 What's Changed
            - Version bumped from v${{ steps.current_version.outputs.version }} to v${{ steps.bump_version.outputs.new_version }}
            - See commit history for detailed changes

            ### 📋 Commit Convention
            - `fix:` or default → patch version bump
            - `feat:` or `minor:` → minor version bump
            - `BREAKING CHANGE:` or `major:` → major version bump
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.current_version.outputs.version }} → ${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.version_type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chrome Web Store**: ${{ steps.chrome_publish.outcome == 'success' && '✅ Submitted' || '⚠️ Manual submission required' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ✅ Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Download**: [mosqit-extension.zip](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.bump_version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY